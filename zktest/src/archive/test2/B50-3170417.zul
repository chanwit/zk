<?xml version="1.0" encoding="UTF-8"?>

<!--
B50-3170417.zul

	Purpose:
		
	Description:
		
	History:
		Thu Feb 10 09:25:12 TST 2011, Created by jumperchen

Copyright (C) 2011 Potix Corporation. All Rights Reserved.

-->
<zk xmlns:n="native">
 <n:ol>
 <n:li>Please open the tree item (Root.4) and then the tree item (Root.4.0). You stould see there displays a paging detail like "[1 - 10 / 15]".</n:li>
 <n:li>Please close the item (Root.4) and then open it again. You should see the paging detail like "[1 - 10 / 15]"</n:li>
 <n:li>Please click upon the "visible", you should see the item (Root.4) is disappeared</n:li>
 <n:li>Please click upon the "open" and then "visible", you should see the item (Root.4) without its children is shown</n:li>
 <n:li>Please click upon the "visible" and then "open" and then "visible", you should see the item (Root.4) with its children is shown</n:li>
 </n:ol>

<vlayout id="inf"/>
<zscript><![CDATA[
public class JeaseTree extends Tree {

        public JeaseTree() {
                setMold("paging");
                setPageSize(10);
        }

        public void refresh() {
                int activePage = getActivePage();
                Set openedValues = new HashSet();
                Object selectedValue = getSelectedValue();
                for (Treeitem treeitem : getTreeitems(getTreechildren(), false)) {
                        if (treeitem.isOpen()) {
                                openedValues.add(treeitem.getValue());
                        }
                }

                TreeModel model = getModel();
                setModel(null);
                setModel(model);
                Treeitem selectedItem = null;
                for (Treeitem treeitem : getTreeitems(getTreechildren(), true)) {
                        if (treeitem.getValue().equals(selectedValue)) {
                                treeitem.setSelected(true);
                                selectedItem = treeitem;
                        } else {
                                treeitem.setOpen(openedValues.contains(treeitem.getValue()));
                        }
                }
                while (selectedItem != null) {
                        selectedItem.setOpen(true);
                        selectedItem = selectedItem.getParentItem();
                }
                setActivePage(activePage);
       }

       Set getTreeitems(Treechildren treeChildren,
                        boolean openItems) {
                Set result = new HashSet();
                if (treeChildren != null) {
                        for (Object child : treeChildren.getItems().toArray(
                                        new Treeitem[] {})) {
                                if (child instanceof Treeitem) {
                                        Treeitem treeitem = (Treeitem) child;
                                        if (openItems) {
                                                treeitem.setOpen(true);
                                        }
                                        result.add(treeitem);
                                        result.addAll(getTreeitems(treeitem.getTreechildren(),
                                                        openItems));
                                }
                        }
                }
                return result;
        }

        public Object getSelectedValue() {
                return getSelectedItem() != null ? getSelectedItem().getValue() : null;
        }

        public void resetSelectedValue() {
                setSelectedItem(null);
        }

}

public class FooModel extends AbstractTreeModel {
    public FooModel() {
        super("Root");
    }
    public boolean isLeaf(Object node) {
        return getLevel((String)node) >= 3; //at most 4 levels
    }
    public Object getChild(Object parent, int index) {
        return parent + "." + index;
    }
    public int getChildCount(Object parent) {
        return 5; //each node has 5 children
    }
    public int getIndexOfChild(Object parent, Object child) {
        String data = (String)child;
        int i = data.lastIndexOf('.');
        return Integer.parseInt(data.substring(i + 1));
    }
    private int getLevel(String data) {
        for (int i = -1, level = 0;; ++level)
            if ((i = data.indexOf('.', i + 1)) < 0)
                return level;
    }
};
public class FooRenderer implements TreeitemRenderer {
    public void render(Treeitem item, Object data) throws Exception {
        String data = data.getData();
        Treerow tr = new Treerow();
        item.appendChild(tr);
		item.setValue(data);
        tr.appendChild(new Treecell(data));
    }
}
FooModel model = new FooModel();
]]></zscript>
<tree id="tree" model="${model}" use="JeaseTree">
    <treecols>
        <treecol label="Names"/>
    </treecols>
</tree>
<button label="refresh" onClick="tree.refresh()"/>
<zscript>
tree.refresh();
</zscript>
<button label="visible">
<attribute name="onClick">
tree.treechildren.lastChild.visible = !tree.treechildren.lastChild.visible ; 
</attribute>
</button>
<button label="open">
<attribute name="onClick">
tree.treechildren.lastChild.open = !tree.treechildren.lastChild.open ; 
</attribute>
</button>
</zk>
